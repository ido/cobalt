# Copyright 2017 UChicago Argonne, LLC. All rights reserved.
# Licensed under a modified BSD 3-clause license. See LICENSE for details.

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pybgsched', [dirname(__file__)])
        except ImportError:
            import _pybgsched
            return _pybgsched
        if fp is not None:
            try:
                _mod = imp.load_module('_pybgsched', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pybgsched = swig_import_helper()
    del swig_import_helper
else:
    import _pybgsched
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _pybgsched.SHARED_PTR_DISOWN
class SortOrder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SortOrder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SortOrder, name)
    __repr__ = _swig_repr
    Ascending = _pybgsched.SortOrder_Ascending
    Descending = _pybgsched.SortOrder_Descending
    def __init__(self): 
        this = _pybgsched.new_SortOrder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_SortOrder
    __del__ = lambda self : None;
SortOrder_swigregister = _pybgsched.SortOrder_swigregister
SortOrder_swigregister(SortOrder)

class Dimension(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dimension, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dimension, name)
    __repr__ = _swig_repr
    A = _pybgsched.Dimension_A
    B = _pybgsched.Dimension_B
    C = _pybgsched.Dimension_C
    D = _pybgsched.Dimension_D
    E = _pybgsched.Dimension_E
    InvalidDimension = _pybgsched.Dimension_InvalidDimension
    MidplaneDims = _pybgsched.Dimension_MidplaneDims
    NodeDims = _pybgsched.Dimension_NodeDims
    def __init__(self, *args): 
        this = _pybgsched.new_Dimension(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self): return _pybgsched.Dimension___str__(self)
    __swig_destroy__ = _pybgsched.delete_Dimension
    __del__ = lambda self : None;
Dimension_swigregister = _pybgsched.Dimension_swigregister
Dimension_swigregister(Dimension)

class Coordinates(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Coordinates, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Coordinates, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybgsched.new_Coordinates(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybgsched.Coordinates___eq__(self, *args)
    def __ne__(self, *args): return _pybgsched.Coordinates___ne__(self, *args)
    def __le__(self, *args): return _pybgsched.Coordinates___le__(self, *args)
    def __ge__(self, *args): return _pybgsched.Coordinates___ge__(self, *args)
    def __getitem__(self, *args): return _pybgsched.Coordinates___getitem__(self, *args)
    def __assign__(self, *args): return _pybgsched.Coordinates___assign__(self, *args)
    def __str__(self): return _pybgsched.Coordinates___str__(self)
    __swig_destroy__ = _pybgsched.delete_Coordinates
    __del__ = lambda self : None;
Coordinates_swigregister = _pybgsched.Coordinates_swigregister
Coordinates_swigregister(Coordinates)

class Job(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Job, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Job, name)
    __repr__ = _swig_repr
    Setup = _pybgsched.Job_Setup
    Loading = _pybgsched.Job_Loading
    Starting = _pybgsched.Job_Starting
    Running = _pybgsched.Job_Running
    Debug = _pybgsched.Job_Debug
    Cleanup = _pybgsched.Job_Cleanup
    Terminated = _pybgsched.Job_Terminated
    Error = _pybgsched.Job_Error
    def getId(self): return _pybgsched.Job_getId(self)
    def getComputeBlockName(self): return _pybgsched.Job_getComputeBlockName(self)
    def getComputeBlockCreationId(self): return _pybgsched.Job_getComputeBlockCreationId(self)
    def getStatus(self): return _pybgsched.Job_getStatus(self)
    def getUser(self): return _pybgsched.Job_getUser(self)
    def getExecutable(self): return _pybgsched.Job_getExecutable(self)
    def getWorkingDirectory(self): return _pybgsched.Job_getWorkingDirectory(self)
    def getErrorText(self): return _pybgsched.Job_getErrorText(self)
    def getArgs(self): return _pybgsched.Job_getArgs(self)
    def getEnvs(self): return _pybgsched.Job_getEnvs(self)
    def getStartTime(self): return _pybgsched.Job_getStartTime(self)
    def getEndTime(self): return _pybgsched.Job_getEndTime(self)
    def getRunTime(self): return _pybgsched.Job_getRunTime(self)
    def isInHistory(self): return _pybgsched.Job_isInHistory(self)
    def getComputeNodesUsed(self): return _pybgsched.Job_getComputeNodesUsed(self)
    def getSequenceId(self): return _pybgsched.Job_getSequenceId(self)
    def getExitStatus(self): return _pybgsched.Job_getExitStatus(self)
    def getCorner(self): return _pybgsched.Job_getCorner(self)
    def getShape(self): return _pybgsched.Job_getShape(self)
    def getRanksPerNode(self): return _pybgsched.Job_getRanksPerNode(self)
    def getNP(self): return _pybgsched.Job_getNP(self)
    def getSchedulerData(self): return _pybgsched.Job_getSchedulerData(self)
    def getMapping(self): return _pybgsched.Job_getMapping(self)
    def getClientInfo(self): return _pybgsched.Job_getClientInfo(self)
    def __init__(self, *args): 
        this = _pybgsched.new_Job(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_Job
    __del__ = lambda self : None;
Job_swigregister = _pybgsched.Job_swigregister
Job_swigregister(Job)

class JobSort_Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JobSort_Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JobSort_Field, name)
    __repr__ = _swig_repr
    Id = _pybgsched.JobSort_Field_Id
    User = _pybgsched.JobSort_Field_User
    Block = _pybgsched.JobSort_Field_Block
    Executable = _pybgsched.JobSort_Field_Executable
    StartTime = _pybgsched.JobSort_Field_StartTime
    EndTime = _pybgsched.JobSort_Field_EndTime
    ExitStatus = _pybgsched.JobSort_Field_ExitStatus
    Status = _pybgsched.JobSort_Field_Status
    ComputeNodesUsed = _pybgsched.JobSort_Field_ComputeNodesUsed
    RanksPerNode = _pybgsched.JobSort_Field_RanksPerNode
    def __init__(self): 
        this = _pybgsched.new_JobSort_Field()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_JobSort_Field
    __del__ = lambda self : None;
JobSort_Field_swigregister = _pybgsched.JobSort_Field_swigregister
JobSort_Field_swigregister(JobSort_Field)

class JobSort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JobSort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JobSort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybgsched.new_JobSort(*args)
        try: self.this.append(this)
        except: self.this = this
    def isSorted(self): return _pybgsched.JobSort_isSorted(self)
    def getField(self): return _pybgsched.JobSort_getField(self)
    def getSortOrder(self): return _pybgsched.JobSort_getSortOrder(self)
    def setSort(self, *args): return _pybgsched.JobSort_setSort(self, *args)
    def getPimpl(self): return _pybgsched.JobSort_getPimpl(self)
    __swig_destroy__ = _pybgsched.delete_JobSort
    __del__ = lambda self : None;
JobSort_swigregister = _pybgsched.JobSort_swigregister
JobSort_swigregister(JobSort)
cvar = _pybgsched.cvar
JobSort.AnyOrder = _pybgsched.cvar.JobSort_AnyOrder

class JobType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JobType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JobType, name)
    __repr__ = _swig_repr
    Active = _pybgsched.JobType_Active
    Completed = _pybgsched.JobType_Completed
    All = _pybgsched.JobType_All
    def __init__(self): 
        this = _pybgsched.new_JobType()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_JobType
    __del__ = lambda self : None;
JobType_swigregister = _pybgsched.JobType_swigregister
JobType_swigregister(JobType)

class JobFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JobFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JobFilter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pybgsched.new_JobFilter()
        try: self.this.append(this)
        except: self.this = this
    def setJobType(self, *args): return _pybgsched.JobFilter_setJobType(self, *args)
    def getJobType(self): return _pybgsched.JobFilter_getJobType(self)
    def setJobId(self, *args): return _pybgsched.JobFilter_setJobId(self, *args)
    def getJobId(self): return _pybgsched.JobFilter_getJobId(self)
    def setSchedulerData(self, *args): return _pybgsched.JobFilter_setSchedulerData(self, *args)
    def getSchedulerData(self): return _pybgsched.JobFilter_getSchedulerData(self)
    def setComputeBlockName(self, *args): return _pybgsched.JobFilter_setComputeBlockName(self, *args)
    def getComputeBlockName(self): return _pybgsched.JobFilter_getComputeBlockName(self)
    def setUser(self, *args): return _pybgsched.JobFilter_setUser(self, *args)
    def getUser(self): return _pybgsched.JobFilter_getUser(self)
    def setExecutable(self, *args): return _pybgsched.JobFilter_setExecutable(self, *args)
    def getExecutable(self): return _pybgsched.JobFilter_getExecutable(self)
    def setStatuses(self, *args): return _pybgsched.JobFilter_setStatuses(self, *args)
    def getStatuses(self): return _pybgsched.JobFilter_getStatuses(self)
    def setExitStatus(self, *args): return _pybgsched.JobFilter_setExitStatus(self, *args)
    def isExitStatusSet(self): return _pybgsched.JobFilter_isExitStatusSet(self)
    def getExitStatus(self): return _pybgsched.JobFilter_getExitStatus(self)
    def setStartTimeInterval(self, *args): return _pybgsched.JobFilter_setStartTimeInterval(self, *args)
    def getStartTimeInterval(self): return _pybgsched.JobFilter_getStartTimeInterval(self)
    def setEndTimeInterval(self, *args): return _pybgsched.JobFilter_setEndTimeInterval(self, *args)
    def getEndTimeInterval(self): return _pybgsched.JobFilter_getEndTimeInterval(self)
    def getPimpl(self): return _pybgsched.JobFilter_getPimpl(self)
    __swig_destroy__ = _pybgsched.delete_JobFilter
    __del__ = lambda self : None;
JobFilter_swigregister = _pybgsched.JobFilter_swigregister
JobFilter_swigregister(JobFilter)

class Hardware(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Hardware, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Hardware, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Available = _pybgsched.Hardware_Available
    Missing = _pybgsched.Hardware_Missing
    Error = _pybgsched.Hardware_Error
    Service = _pybgsched.Hardware_Service
    SoftwareFailure = _pybgsched.Hardware_SoftwareFailure
    def toString(self): return _pybgsched.Hardware_toString(self)
    def getState(self): return _pybgsched.Hardware_getState(self)
    def getLocation(self): return _pybgsched.Hardware_getLocation(self)
    __swig_destroy__ = _pybgsched.delete_Hardware
    __del__ = lambda self : None;
    def getPimpl(self): return _pybgsched.Hardware_getPimpl(self)
Hardware_swigregister = _pybgsched.Hardware_swigregister
Hardware_swigregister(Hardware)

class Node(Hardware):
    __swig_setmethods__ = {}
    for _s in [Hardware]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [Hardware]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def getSequenceId(self): return _pybgsched.Node_getSequenceId(self)
    def __init__(self, *args): 
        this = _pybgsched.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_Node
    __del__ = lambda self : None;
Node_swigregister = _pybgsched.Node_swigregister
Node_swigregister(Node)

class Shape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shape, name)
    __repr__ = _swig_repr
    def getMidplaneSize(self, *args): return _pybgsched.Shape_getMidplaneSize(self, *args)
    def getNodeSize(self, *args): return _pybgsched.Shape_getNodeSize(self, *args)
    def getMidplaneCount(self): return _pybgsched.Shape_getMidplaneCount(self)
    def getNodeCount(self): return _pybgsched.Shape_getNodeCount(self)
    def isSmall(self): return _pybgsched.Shape_isSmall(self)
    def isLarge(self): return _pybgsched.Shape_isLarge(self)
    def isFull(self): return _pybgsched.Shape_isFull(self)
    def getPimpl(self): return _pybgsched.Shape_getPimpl(self)
    def __init__(self, *args): 
        this = _pybgsched.new_Shape(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybgsched.Shape___eq__(self, *args)
    def __ne__(self, *args): return _pybgsched.Shape___ne__(self, *args)
    __swig_destroy__ = _pybgsched.delete_Shape
    __del__ = lambda self : None;
Shape_swigregister = _pybgsched.Shape_swigregister
Shape_swigregister(Shape)

class Cable(Hardware):
    __swig_setmethods__ = {}
    for _s in [Hardware]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cable, name, value)
    __swig_getmethods__ = {}
    for _s in [Hardware]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cable, name)
    __repr__ = _swig_repr
    def getDestinationLocation(self): return _pybgsched.Cable_getDestinationLocation(self)
    def getSequenceId(self): return _pybgsched.Cable_getSequenceId(self)
    def __init__(self, *args): 
        this = _pybgsched.new_Cable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_Cable
    __del__ = lambda self : None;
Cable_swigregister = _pybgsched.Cable_swigregister
Cable_swigregister(Cable)

class SwitchSettings(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchSettings, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchSettings, name)
    __repr__ = _swig_repr
    In = _pybgsched.SwitchSettings_In
    Out = _pybgsched.SwitchSettings_Out
    Both = _pybgsched.SwitchSettings_Both
    def getLocation(self): return _pybgsched.SwitchSettings_getLocation(self)
    def getPortsSetting(self): return _pybgsched.SwitchSettings_getPortsSetting(self)
    def isIncludedMidplane(self): return _pybgsched.SwitchSettings_isIncludedMidplane(self)
    def getComputeBlockName(self): return _pybgsched.SwitchSettings_getComputeBlockName(self)
    def isPassthrough(self): return _pybgsched.SwitchSettings_isPassthrough(self)
    def __init__(self, *args): 
        this = _pybgsched.new_SwitchSettings(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_SwitchSettings
    __del__ = lambda self : None;
SwitchSettings_swigregister = _pybgsched.SwitchSettings_swigregister
SwitchSettings_swigregister(SwitchSettings)

class Switch(Hardware):
    __swig_setmethods__ = {}
    for _s in [Hardware]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Switch, name, value)
    __swig_getmethods__ = {}
    for _s in [Hardware]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Switch, name)
    __repr__ = _swig_repr
    NotInUse = _pybgsched.Switch_NotInUse
    IncludedBothPortsInUse = _pybgsched.Switch_IncludedBothPortsInUse
    IncludedOutputPortInUse = _pybgsched.Switch_IncludedOutputPortInUse
    IncludedInputPortInUse = _pybgsched.Switch_IncludedInputPortInUse
    Wrapped = _pybgsched.Switch_Wrapped
    Passthrough = _pybgsched.Switch_Passthrough
    WrappedPassthrough = _pybgsched.Switch_WrappedPassthrough
    def getInUse(self): return _pybgsched.Switch_getInUse(self)
    def getSequenceId(self): return _pybgsched.Switch_getSequenceId(self)
    def getSwitchSettings(self): return _pybgsched.Switch_getSwitchSettings(self)
    def getCable(self): return _pybgsched.Switch_getCable(self)
    def getMidplaneCoordinates(self): return _pybgsched.Switch_getMidplaneCoordinates(self)
    def getMidplaneLocation(self): return _pybgsched.Switch_getMidplaneLocation(self)
    def __init__(self, *args): 
        this = _pybgsched.new_Switch(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_Switch
    __del__ = lambda self : None;
Switch_swigregister = _pybgsched.Switch_swigregister
Switch_swigregister(Switch)

class NodeBoard(Hardware):
    __swig_setmethods__ = {}
    for _s in [Hardware]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeBoard, name, value)
    __swig_getmethods__ = {}
    for _s in [Hardware]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NodeBoard, name)
    __repr__ = _swig_repr
    Q1 = _pybgsched.NodeBoard_Q1
    Q2 = _pybgsched.NodeBoard_Q2
    Q3 = _pybgsched.NodeBoard_Q3
    Q4 = _pybgsched.NodeBoard_Q4
    NodeCount = _pybgsched.NodeBoard_NodeCount
    def getSequenceId(self): return _pybgsched.NodeBoard_getSequenceId(self)
    def getQuadrant(self): return _pybgsched.NodeBoard_getQuadrant(self)
    def isInUse(self): return _pybgsched.NodeBoard_isInUse(self)
    def getComputeBlockName(self): return _pybgsched.NodeBoard_getComputeBlockName(self)
    def getMidplaneCoordinates(self): return _pybgsched.NodeBoard_getMidplaneCoordinates(self)
    def getMidplaneLocation(self): return _pybgsched.NodeBoard_getMidplaneLocation(self)
    def __init__(self, *args): 
        this = _pybgsched.new_NodeBoard(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_NodeBoard
    __del__ = lambda self : None;
NodeBoard_swigregister = _pybgsched.NodeBoard_swigregister
NodeBoard_swigregister(NodeBoard)

class Midplane(Hardware):
    __swig_setmethods__ = {}
    for _s in [Hardware]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Midplane, name, value)
    __swig_getmethods__ = {}
    for _s in [Hardware]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Midplane, name)
    __repr__ = _swig_repr
    NotInUse = _pybgsched.Midplane_NotInUse
    AllInUse = _pybgsched.Midplane_AllInUse
    SubdividedInUse = _pybgsched.Midplane_SubdividedInUse
    Eighth = _pybgsched.Midplane_Eighth
    Quarter = _pybgsched.Midplane_Quarter
    Half = _pybgsched.Midplane_Half
    NodeCount = _pybgsched.Midplane_NodeCount
    MaxNodeBoards = _pybgsched.Midplane_MaxNodeBoards
    def getSequenceId(self): return _pybgsched.Midplane_getSequenceId(self)
    def getComputeNodeMemory(self): return _pybgsched.Midplane_getComputeNodeMemory(self)
    def getAvailableNodeBoardCount(self): return _pybgsched.Midplane_getAvailableNodeBoardCount(self)
    def getNodeBoard(self, *args): return _pybgsched.Midplane_getNodeBoard(self, *args)
    def getSwitch(self, *args): return _pybgsched.Midplane_getSwitch(self, *args)
    def getCoordinates(self): return _pybgsched.Midplane_getCoordinates(self)
    def getInUse(self): return _pybgsched.Midplane_getInUse(self)
    def getComputeBlockName(self): return _pybgsched.Midplane_getComputeBlockName(self)
    def __init__(self, *args): 
        this = _pybgsched.new_Midplane(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPimpl(self): return _pybgsched.Midplane_getPimpl(self)
    __swig_destroy__ = _pybgsched.delete_Midplane
    __del__ = lambda self : None;
Midplane_swigregister = _pybgsched.Midplane_swigregister
Midplane_swigregister(Midplane)

class ComputeHardware(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputeHardware, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputeHardware, name)
    __repr__ = _swig_repr
    def getState(self, *args): return _pybgsched.ComputeHardware_getState(self, *args)
    def getMachineSize(self, *args): return _pybgsched.ComputeHardware_getMachineSize(self, *args)
    def getMidplaneSize(self, *args): return _pybgsched.ComputeHardware_getMidplaneSize(self, *args)
    def getMachineRows(self): return _pybgsched.ComputeHardware_getMachineRows(self)
    def getMachineColumns(self): return _pybgsched.ComputeHardware_getMachineColumns(self)
    def getMidplane(self, *args): return _pybgsched.ComputeHardware_getMidplane(self, *args)
    def __init__(self, *args): 
        this = _pybgsched.new_ComputeHardware(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_ComputeHardware
    __del__ = lambda self : None;
ComputeHardware_swigregister = _pybgsched.ComputeHardware_swigregister
ComputeHardware_swigregister(ComputeHardware)

class DatabaseErrors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabaseErrors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatabaseErrors, name)
    __repr__ = _swig_repr
    DatabaseError = _pybgsched.DatabaseErrors_DatabaseError
    OperationFailed = _pybgsched.DatabaseErrors_OperationFailed
    InvalidKey = _pybgsched.DatabaseErrors_InvalidKey
    DataNotFound = _pybgsched.DatabaseErrors_DataNotFound
    DuplicateEntry = _pybgsched.DatabaseErrors_DuplicateEntry
    XmlError = _pybgsched.DatabaseErrors_XmlError
    ConnectionError = _pybgsched.DatabaseErrors_ConnectionError
    UnexpectedError = _pybgsched.DatabaseErrors_UnexpectedError
    __swig_getmethods__["toString"] = lambda x: _pybgsched.DatabaseErrors_toString
    if _newclass:toString = staticmethod(_pybgsched.DatabaseErrors_toString)
    __swig_getmethods__["fromDatabaseStatus"] = lambda x: _pybgsched.DatabaseErrors_fromDatabaseStatus
    if _newclass:fromDatabaseStatus = staticmethod(_pybgsched.DatabaseErrors_fromDatabaseStatus)
    def __init__(self): 
        this = _pybgsched.new_DatabaseErrors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_DatabaseErrors
    __del__ = lambda self : None;
DatabaseErrors_swigregister = _pybgsched.DatabaseErrors_swigregister
DatabaseErrors_swigregister(DatabaseErrors)

def DatabaseErrors_toString(*args):
  return _pybgsched.DatabaseErrors_toString(*args)
DatabaseErrors_toString = _pybgsched.DatabaseErrors_toString

def DatabaseErrors_fromDatabaseStatus(*args):
  return _pybgsched.DatabaseErrors_fromDatabaseStatus(*args)
DatabaseErrors_fromDatabaseStatus = _pybgsched.DatabaseErrors_fromDatabaseStatus

class BlockSort_Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockSort_Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockSort_Field, name)
    __repr__ = _swig_repr
    ComputeNodeCount = _pybgsched.BlockSort_Field_ComputeNodeCount
    CreateDate = _pybgsched.BlockSort_Field_CreateDate
    Name = _pybgsched.BlockSort_Field_Name
    Owner = _pybgsched.BlockSort_Field_Owner
    User = _pybgsched.BlockSort_Field_User
    Status = _pybgsched.BlockSort_Field_Status
    StatusLastModified = _pybgsched.BlockSort_Field_StatusLastModified
    def __init__(self): 
        this = _pybgsched.new_BlockSort_Field()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_BlockSort_Field
    __del__ = lambda self : None;
BlockSort_Field_swigregister = _pybgsched.BlockSort_Field_swigregister
BlockSort_Field_swigregister(BlockSort_Field)

class BlockSort(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockSort, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockSort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybgsched.new_BlockSort(*args)
        try: self.this.append(this)
        except: self.this = this
    def isSorted(self): return _pybgsched.BlockSort_isSorted(self)
    def getField(self): return _pybgsched.BlockSort_getField(self)
    def getSortOrder(self): return _pybgsched.BlockSort_getSortOrder(self)
    def setSort(self, *args): return _pybgsched.BlockSort_setSort(self, *args)
    def getPimpl(self): return _pybgsched.BlockSort_getPimpl(self)
    __swig_destroy__ = _pybgsched.delete_BlockSort
    __del__ = lambda self : None;
BlockSort_swigregister = _pybgsched.BlockSort_swigregister
BlockSort_swigregister(BlockSort)
BlockSort.AnyOrder = _pybgsched.cvar.BlockSort_AnyOrder

class BlockSize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockSize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockSize, name)
    __repr__ = _swig_repr
    Large = _pybgsched.BlockSize_Large
    Small = _pybgsched.BlockSize_Small
    All = _pybgsched.BlockSize_All
    def __init__(self): 
        this = _pybgsched.new_BlockSize()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_BlockSize
    __del__ = lambda self : None;
BlockSize_swigregister = _pybgsched.BlockSize_swigregister
BlockSize_swigregister(BlockSize)

class BlockFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockFilter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pybgsched.new_BlockFilter()
        try: self.this.append(this)
        except: self.this = this
    def setStatuses(self, *args): return _pybgsched.BlockFilter_setStatuses(self, *args)
    def setExtendedInfo(self, *args): return _pybgsched.BlockFilter_setExtendedInfo(self, *args)
    def setIncludeJobs(self, *args): return _pybgsched.BlockFilter_setIncludeJobs(self, *args)
    def setName(self, *args): return _pybgsched.BlockFilter_setName(self, *args)
    def setOwner(self, *args): return _pybgsched.BlockFilter_setOwner(self, *args)
    def setUser(self, *args): return _pybgsched.BlockFilter_setUser(self, *args)
    def setSize(self, *args): return _pybgsched.BlockFilter_setSize(self, *args)
    def getStatuses(self): return _pybgsched.BlockFilter_getStatuses(self)
    def getName(self): return _pybgsched.BlockFilter_getName(self)
    def getOwner(self): return _pybgsched.BlockFilter_getOwner(self)
    def getUser(self): return _pybgsched.BlockFilter_getUser(self)
    def getExtendedInfo(self): return _pybgsched.BlockFilter_getExtendedInfo(self)
    def getIncludeJobs(self): return _pybgsched.BlockFilter_getIncludeJobs(self)
    def getSize(self): return _pybgsched.BlockFilter_getSize(self)
    def getPimpl(self): return _pybgsched.BlockFilter_getPimpl(self)
    __swig_destroy__ = _pybgsched.delete_BlockFilter
    __del__ = lambda self : None;
BlockFilter_swigregister = _pybgsched.BlockFilter_swigregister
BlockFilter_swigregister(BlockFilter)

class IOLink(Hardware):
    __swig_setmethods__ = {}
    for _s in [Hardware]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IOLink, name, value)
    __swig_getmethods__ = {}
    for _s in [Hardware]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IOLink, name)
    __repr__ = _swig_repr
    def getDestinationLocation(self): return _pybgsched.IOLink_getDestinationLocation(self)
    def getSequenceId(self): return _pybgsched.IOLink_getSequenceId(self)
    def __init__(self, *args): 
        this = _pybgsched.new_IOLink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_IOLink
    __del__ = lambda self : None;
IOLink_swigregister = _pybgsched.IOLink_swigregister
IOLink_swigregister(IOLink)

class Connectivity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connectivity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Connectivity, name)
    __repr__ = _swig_repr
    Torus = _pybgsched.Connectivity_Torus
    Mesh = _pybgsched.Connectivity_Mesh
    def __init__(self): 
        this = _pybgsched.new_Connectivity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_Connectivity
    __del__ = lambda self : None;
Connectivity_swigregister = _pybgsched.Connectivity_swigregister
Connectivity_swigregister(Connectivity)

class Block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Block, name)
    __repr__ = _swig_repr
    Allocated = _pybgsched.Block_Allocated
    Booting = _pybgsched.Block_Booting
    Free = _pybgsched.Block_Free
    Initialized = _pybgsched.Block_Initialized
    Terminating = _pybgsched.Block_Terminating
    __swig_getmethods__["create"] = lambda x: _pybgsched.Block_create
    if _newclass:create = staticmethod(_pybgsched.Block_create)
    __swig_getmethods__["isIOConnected"] = lambda x: _pybgsched.Block_isIOConnected
    if _newclass:isIOConnected = staticmethod(_pybgsched.Block_isIOConnected)
    __swig_getmethods__["checkIOLinks"] = lambda x: _pybgsched.Block_checkIOLinks
    if _newclass:checkIOLinks = staticmethod(_pybgsched.Block_checkIOLinks)
    __swig_getmethods__["checkIOLinksSummary"] = lambda x: _pybgsched.Block_checkIOLinksSummary
    if _newclass:checkIOLinksSummary = staticmethod(_pybgsched.Block_checkIOLinksSummary)
    __swig_getmethods__["initiateBoot"] = lambda x: _pybgsched.Block_initiateBoot
    if _newclass:initiateBoot = staticmethod(_pybgsched.Block_initiateBoot)
    __swig_getmethods__["initiateFree"] = lambda x: _pybgsched.Block_initiateFree
    if _newclass:initiateFree = staticmethod(_pybgsched.Block_initiateFree)
    __swig_getmethods__["remove"] = lambda x: _pybgsched.Block_remove
    if _newclass:remove = staticmethod(_pybgsched.Block_remove)
    __swig_getmethods__["addUser"] = lambda x: _pybgsched.Block_addUser
    if _newclass:addUser = staticmethod(_pybgsched.Block_addUser)
    __swig_getmethods__["removeUser"] = lambda x: _pybgsched.Block_removeUser
    if _newclass:removeUser = staticmethod(_pybgsched.Block_removeUser)
    __swig_getmethods__["isAuthorized"] = lambda x: _pybgsched.Block_isAuthorized
    if _newclass:isAuthorized = staticmethod(_pybgsched.Block_isAuthorized)
    __swig_getmethods__["getUsers"] = lambda x: _pybgsched.Block_getUsers
    if _newclass:getUsers = staticmethod(_pybgsched.Block_getUsers)
    def add(self, *args): return _pybgsched.Block_add(self, *args)
    def update(self): return _pybgsched.Block_update(self)
    def toString(self, *args): return _pybgsched.Block_toString(self, *args)
    def isLarge(self): return _pybgsched.Block_isLarge(self)
    def isSmall(self): return _pybgsched.Block_isSmall(self)
    def getDimensionSize(self, *args): return _pybgsched.Block_getDimensionSize(self, *args)
    def isTorus(self, *args): return _pybgsched.Block_isTorus(self, *args)
    def isMesh(self, *args): return _pybgsched.Block_isMesh(self, *args)
    def getName(self): return _pybgsched.Block_getName(self)
    def getCreationId(self): return _pybgsched.Block_getCreationId(self)
    def getDescription(self): return _pybgsched.Block_getDescription(self)
    def getOwner(self): return _pybgsched.Block_getOwner(self)
    def getUser(self): return _pybgsched.Block_getUser(self)
    def getBootOptions(self): return _pybgsched.Block_getBootOptions(self)
    def getMicroLoaderImage(self): return _pybgsched.Block_getMicroLoaderImage(self)
    def getNodeConfiguration(self): return _pybgsched.Block_getNodeConfiguration(self)
    def getSequenceId(self): return _pybgsched.Block_getSequenceId(self)
    def getStatus(self): return _pybgsched.Block_getStatus(self)
    def getComputeNodeCount(self): return _pybgsched.Block_getComputeNodeCount(self)
    def getOptions(self): return _pybgsched.Block_getOptions(self)
    def getJobIds(self): return _pybgsched.Block_getJobIds(self)
    def getMidplanes(self): return _pybgsched.Block_getMidplanes(self)
    def getNodeBoards(self): return _pybgsched.Block_getNodeBoards(self)
    def getPassthroughMidplanes(self): return _pybgsched.Block_getPassthroughMidplanes(self)
    def setName(self, *args): return _pybgsched.Block_setName(self, *args)
    def setDescription(self, *args): return _pybgsched.Block_setDescription(self, *args)
    def setOptions(self, *args): return _pybgsched.Block_setOptions(self, *args)
    def setBootOptions(self, *args): return _pybgsched.Block_setBootOptions(self, *args)
    def setMicroLoaderImage(self, *args): return _pybgsched.Block_setMicroLoaderImage(self, *args)
    def setNodeConfiguration(self, *args): return _pybgsched.Block_setNodeConfiguration(self, *args)
    def getPimpl(self): return _pybgsched.Block_getPimpl(self)
    def __init__(self, *args): 
        this = _pybgsched.new_Block(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_Block
    __del__ = lambda self : None;
Block_swigregister = _pybgsched.Block_swigregister
Block_swigregister(Block)

def Block_create(*args):
  return _pybgsched.Block_create(*args)
Block_create = _pybgsched.Block_create

def Block_isIOConnected(*args):
  return _pybgsched.Block_isIOConnected(*args)
Block_isIOConnected = _pybgsched.Block_isIOConnected

def Block_checkIOLinks(*args):
  return _pybgsched.Block_checkIOLinks(*args)
Block_checkIOLinks = _pybgsched.Block_checkIOLinks

def Block_checkIOLinksSummary(*args):
  return _pybgsched.Block_checkIOLinksSummary(*args)
Block_checkIOLinksSummary = _pybgsched.Block_checkIOLinksSummary

def Block_initiateBoot(*args):
  return _pybgsched.Block_initiateBoot(*args)
Block_initiateBoot = _pybgsched.Block_initiateBoot

def Block_initiateFree(*args):
  return _pybgsched.Block_initiateFree(*args)
Block_initiateFree = _pybgsched.Block_initiateFree

def Block_remove(*args):
  return _pybgsched.Block_remove(*args)
Block_remove = _pybgsched.Block_remove

def Block_addUser(*args):
  return _pybgsched.Block_addUser(*args)
Block_addUser = _pybgsched.Block_addUser

def Block_removeUser(*args):
  return _pybgsched.Block_removeUser(*args)
Block_removeUser = _pybgsched.Block_removeUser

def Block_isAuthorized(*args):
  return _pybgsched.Block_isAuthorized(*args)
Block_isAuthorized = _pybgsched.Block_isAuthorized

def Block_getUsers(*args):
  return _pybgsched.Block_getUsers(*args)
Block_getUsers = _pybgsched.Block_getUsers

class SchedUtil_Errors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchedUtil_Errors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchedUtil_Errors, name)
    __repr__ = _swig_repr
    InputVectorSizeMismatch = _pybgsched.SchedUtil_Errors_InputVectorSizeMismatch
    VectorIndexOutOfBounds = _pybgsched.SchedUtil_Errors_VectorIndexOutOfBounds
    __swig_getmethods__["toString"] = lambda x: _pybgsched.SchedUtil_Errors_toString
    if _newclass:toString = staticmethod(_pybgsched.SchedUtil_Errors_toString)
    def __init__(self): 
        this = _pybgsched.new_SchedUtil_Errors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_SchedUtil_Errors
    __del__ = lambda self : None;
SchedUtil_Errors_swigregister = _pybgsched.SchedUtil_Errors_swigregister
SchedUtil_Errors_swigregister(SchedUtil_Errors)

def SchedUtil_Errors_toString(*args):
  return _pybgsched.SchedUtil_Errors_toString(*args)
SchedUtil_Errors_toString = _pybgsched.SchedUtil_Errors_toString

class SchedUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SchedUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SchedUtil, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createBlockName"] = lambda x: _pybgsched.SchedUtil_createBlockName
    if _newclass:createBlockName = staticmethod(_pybgsched.SchedUtil_createBlockName)
    __swig_getmethods__["iterateAll"] = lambda x: _pybgsched.SchedUtil_iterateAll
    if _newclass:iterateAll = staticmethod(_pybgsched.SchedUtil_iterateAll)
    __swig_getmethods__["iterateAllMidplanes"] = lambda x: _pybgsched.SchedUtil_iterateAllMidplanes
    if _newclass:iterateAllMidplanes = staticmethod(_pybgsched.SchedUtil_iterateAllMidplanes)
    __swig_getmethods__["iterateMidplanes"] = lambda x: _pybgsched.SchedUtil_iterateMidplanes
    if _newclass:iterateMidplanes = staticmethod(_pybgsched.SchedUtil_iterateMidplanes)
    __swig_getmethods__["iterate"] = lambda x: _pybgsched.SchedUtil_iterate
    if _newclass:iterate = staticmethod(_pybgsched.SchedUtil_iterate)
    def __init__(self): 
        this = _pybgsched.new_SchedUtil()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_SchedUtil
    __del__ = lambda self : None;
SchedUtil_swigregister = _pybgsched.SchedUtil_swigregister
SchedUtil_swigregister(SchedUtil)

def SchedUtil_createBlockName(*args):
  return _pybgsched.SchedUtil_createBlockName(*args)
SchedUtil_createBlockName = _pybgsched.SchedUtil_createBlockName

def SchedUtil_iterateAll(*args):
  return _pybgsched.SchedUtil_iterateAll(*args)
SchedUtil_iterateAll = _pybgsched.SchedUtil_iterateAll

def SchedUtil_iterateAllMidplanes(*args):
  return _pybgsched.SchedUtil_iterateAllMidplanes(*args)
SchedUtil_iterateAllMidplanes = _pybgsched.SchedUtil_iterateAllMidplanes

def SchedUtil_iterateMidplanes(*args):
  return _pybgsched.SchedUtil_iterateMidplanes(*args)
SchedUtil_iterateMidplanes = _pybgsched.SchedUtil_iterateMidplanes

def SchedUtil_iterate(*args):
  return _pybgsched.SchedUtil_iterate(*args)
SchedUtil_iterate = _pybgsched.SchedUtil_iterate

class InitializationErrors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InitializationErrors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InitializationErrors, name)
    __repr__ = _swig_repr
    DatabaseInitializationFailed = _pybgsched.InitializationErrors_DatabaseInitializationFailed
    MalformedPropertiesFile = _pybgsched.InitializationErrors_MalformedPropertiesFile
    PropertiesNotFound = _pybgsched.InitializationErrors_PropertiesNotFound
    __swig_getmethods__["toString"] = lambda x: _pybgsched.InitializationErrors_toString
    if _newclass:toString = staticmethod(_pybgsched.InitializationErrors_toString)
    def __init__(self): 
        this = _pybgsched.new_InitializationErrors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_InitializationErrors
    __del__ = lambda self : None;
InitializationErrors_swigregister = _pybgsched.InitializationErrors_swigregister
InitializationErrors_swigregister(InitializationErrors)

def InitializationErrors_toString(*args):
  return _pybgsched.InitializationErrors_toString(*args)
InitializationErrors_toString = _pybgsched.InitializationErrors_toString

class InternalErrors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InternalErrors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InternalErrors, name)
    __repr__ = _swig_repr
    XMLParseError = _pybgsched.InternalErrors_XMLParseError
    InconsistentDataError = _pybgsched.InternalErrors_InconsistentDataError
    UnexpectedError = _pybgsched.InternalErrors_UnexpectedError
    __swig_getmethods__["toString"] = lambda x: _pybgsched.InternalErrors_toString
    if _newclass:toString = staticmethod(_pybgsched.InternalErrors_toString)
    def __init__(self): 
        this = _pybgsched.new_InternalErrors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_InternalErrors
    __del__ = lambda self : None;
InternalErrors_swigregister = _pybgsched.InternalErrors_swigregister
InternalErrors_swigregister(InternalErrors)

def InternalErrors_toString(*args):
  return _pybgsched.InternalErrors_toString(*args)
InternalErrors_toString = _pybgsched.InternalErrors_toString

class InputErrors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputErrors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputErrors, name)
    __repr__ = _swig_repr
    InvalidMidplaneCoordinates = _pybgsched.InputErrors_InvalidMidplaneCoordinates
    InvalidLocationString = _pybgsched.InputErrors_InvalidLocationString
    InvalidBlockSize = _pybgsched.InputErrors_InvalidBlockSize
    InvalidBlockName = _pybgsched.InputErrors_InvalidBlockName
    InvalidBlockDescription = _pybgsched.InputErrors_InvalidBlockDescription
    InvalidBlockOptions = _pybgsched.InputErrors_InvalidBlockOptions
    InvalidBlockBootOptions = _pybgsched.InputErrors_InvalidBlockBootOptions
    InvalidBlockMicroLoaderImage = _pybgsched.InputErrors_InvalidBlockMicroLoaderImage
    InvalidBlockNodeConfiguration = _pybgsched.InputErrors_InvalidBlockNodeConfiguration
    InvalidBlockInfo = _pybgsched.InputErrors_InvalidBlockInfo
    InvalidNodeBoards = _pybgsched.InputErrors_InvalidNodeBoards
    InvalidDimension = _pybgsched.InputErrors_InvalidDimension
    InvalidNodeBoardCount = _pybgsched.InputErrors_InvalidNodeBoardCount
    InvalidNodeBoardPosition = _pybgsched.InputErrors_InvalidNodeBoardPosition
    InvalidMidplanes = _pybgsched.InputErrors_InvalidMidplanes
    InvalidPassthroughMidplanes = _pybgsched.InputErrors_InvalidPassthroughMidplanes
    InvalidConnectivity = _pybgsched.InputErrors_InvalidConnectivity
    BlockNotFound = _pybgsched.InputErrors_BlockNotFound
    BlockNotAdded = _pybgsched.InputErrors_BlockNotAdded
    BlockNotCreated = _pybgsched.InputErrors_BlockNotCreated
    InvalidUser = _pybgsched.InputErrors_InvalidUser
    __swig_getmethods__["toString"] = lambda x: _pybgsched.InputErrors_toString
    if _newclass:toString = staticmethod(_pybgsched.InputErrors_toString)
    def __init__(self): 
        this = _pybgsched.new_InputErrors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_InputErrors
    __del__ = lambda self : None;
InputErrors_swigregister = _pybgsched.InputErrors_swigregister
InputErrors_swigregister(InputErrors)

def InputErrors_toString(*args):
  return _pybgsched.InputErrors_toString(*args)
InputErrors_toString = _pybgsched.InputErrors_toString

class TimeInterval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeInterval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeInterval, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pybgsched.new_TimeInterval(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _pybgsched.TimeInterval___eq__(self, *args)
    def __ne__(self, *args): return _pybgsched.TimeInterval___ne__(self, *args)
    def getStart(self): return _pybgsched.TimeInterval_getStart(self)
    def getEnd(self): return _pybgsched.TimeInterval_getEnd(self)
    __swig_destroy__ = _pybgsched.delete_TimeInterval
    __del__ = lambda self : None;
TimeInterval_swigregister = _pybgsched.TimeInterval_swigregister
TimeInterval_swigregister(TimeInterval)
TimeInterval.ALL = _pybgsched.cvar.TimeInterval_ALL

class RuntimeErrors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RuntimeErrors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RuntimeErrors, name)
    __repr__ = _swig_repr
    BlockBootError = _pybgsched.RuntimeErrors_BlockBootError
    BlockFreeError = _pybgsched.RuntimeErrors_BlockFreeError
    BlockCreateError = _pybgsched.RuntimeErrors_BlockCreateError
    BlockAddError = _pybgsched.RuntimeErrors_BlockAddError
    InvalidBlockState = _pybgsched.RuntimeErrors_InvalidBlockState
    DimensionOutOfRange = _pybgsched.RuntimeErrors_DimensionOutOfRange
    AuthorityError = _pybgsched.RuntimeErrors_AuthorityError
    HardwareInUseError = _pybgsched.RuntimeErrors_HardwareInUseError
    __swig_getmethods__["toString"] = lambda x: _pybgsched.RuntimeErrors_toString
    if _newclass:toString = staticmethod(_pybgsched.RuntimeErrors_toString)
    def __init__(self): 
        this = _pybgsched.new_RuntimeErrors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pybgsched.delete_RuntimeErrors
    __del__ = lambda self : None;
RuntimeErrors_swigregister = _pybgsched.RuntimeErrors_swigregister
RuntimeErrors_swigregister(RuntimeErrors)

def RuntimeErrors_toString(*args):
  return _pybgsched.RuntimeErrors_toString(*args)
RuntimeErrors_toString = _pybgsched.RuntimeErrors_toString


def init(*args):
  return _pybgsched.init(*args)
init = _pybgsched.init

def refreshConfiguration():
  return _pybgsched.refreshConfiguration()
refreshConfiguration = _pybgsched.refreshConfiguration

def getComputeHardware():
  return _pybgsched.getComputeHardware()
getComputeHardware = _pybgsched.getComputeHardware

def getMachineSize():
  return _pybgsched.getMachineSize()
getMachineSize = _pybgsched.getMachineSize

def getMidplaneCoordinates(*args):
  return _pybgsched.getMidplaneCoordinates(*args)
getMidplaneCoordinates = _pybgsched.getMidplaneCoordinates

def getNodeBoards(*args):
  return _pybgsched.getNodeBoards(*args)
getNodeBoards = _pybgsched.getNodeBoards

def getNodes(*args):
  return _pybgsched.getNodes(*args)
getNodes = _pybgsched.getNodes

def getIOLinks(*args):
  return _pybgsched.getIOLinks(*args)
getIOLinks = _pybgsched.getIOLinks
# This file is compatible with both classic and new-style classes.

major = cvar.major
minor = cvar.minor
mod = cvar.mod
driver = cvar.driver

def getBlocks(*args):
  return _pybgsched.getBlocks(*args)
getBlocks = _pybgsched.getBlocks

def getJobs(*args):
  return _pybgsched.getJobs(*args)
getJobs = _pybgsched.getJobs

