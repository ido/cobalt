.SH "NAME"
.TH "qsub" 1
qsub \- submit jobs to the queue manager for execution
.SH "SYNOPSIS"
.B qsub 
.I [<options>] <executable> [<executable options>]
.SH "DESCRIPTION"
.PP
.B qsub
submits a job to the queue manager for execution. 

.B JOBID EXPANSION ($jobid or $COBALT_JOBID):

If $jobid or $COBALT_JOBID is specified in any jobid expansion option 
then it will be converted to the actual jobid. 

Example: qsub ... --env myenv=\\$jobid_myval ... 

If the jobid is 123 then myenv will be set to '123_myval'

jobid expansion options: --env, --jobname, -o, -e, -O, --debuglog

Note: Remember to escape appropriately "\\$jobid" or "\\$COBALT_JOBID" 

.B SCRIPT JOB DIRECTIVES (#COBALT):

Command options can be entered in a script job by using #COBALT <options>.
You can enter all in one directive or directives.
The #COBALT tag should be right after the first line of the script.
qsub will continue to read directives until it reads the first line that 
does not contain the tag #COBALT.

The command line options will take precedence over the Cobalt script jobx
directives.

Note: An error will occur if in the script the --mode option 
is specified and it is not "script"

Example: 

  script.sh:
     
    #!bin/bash
    #COBALT -t 50 -n 30
    echo "SCRIPT JOB WITH DIRECTIVE"

  or

    #!bin/bash
    #COBALT -t 50 
    #COBALT -n 30
    echo "SCRIPT JOB WITH DIRECTIVE"

  qsub script.sh sargs 
  is equivalent to 
  qsub -t 50 -n 30 --mode script script.sh sargs

  qsub -t 75 script.sh sargs 
  is equivalent to 
  qsub -t 75 -n 30 --mode script script.sh sargs

  qsub -n 48 --mode script script.sh sargs 
  is equivalent to 
  qsub -t 75 -n 48 --mode script script.sh sargs

.SH "OPTIONS"
.TP
.B \-d \-\-debug
Turn on communication debugging
.TP
.B \-\-help
Displays the usage and a brief descriptions of the options
.TP
.B \-\-version
Displays client revision and Cobalt version
.TP
.B \-A \-\-project [project]
Associate the job with the allocation for project project. This is
used to properly account for machine usage. 
.TP
.B \-\-attrs [<attr1=val1>:<attr2=val2>:...]
Set a list of attributes for a job that must be fulfilled for a job to run.  
For instance, --attrs location=[blocklocation] will force a job to run on a 
specific block.
.TP
.B \-\-cwd [directory]
Tell the job to use the specified directory as the default current working directory
while running the job.
.TP
.B \-\-debuglog [path to file] - (jobid expansion)
Send debugging information from cobalt to file specified.
.TP
.B \-\-dependencies [<jobid1>:<jobid2>:...]
Set the dependencies for the job being submitted.  This job won't run until 
all jobs in the dependency list have finished and exited with a status of 0.
.TP
.B \-\-disable_preboot
If --mode script is specified, this will cause Cobalt to run the job script without
booting the block first.  By default the script is executed after the requested block is booted.
.TP
.B \-e \-\-error [path to file] - (jobid expansion)
Send job stderr to file specified.
.TP
.B \-\-env [<var1=value1>:<var=value2>] - (jobid expansion)
Set environment variables that will be passed into the job's environment.
If the the characters ":" and "=" are within the value, right hand side (rhs) of a environment variable assignment,
then need to quote the entire string and precede any ":" and "=" characters that are in the rhs with "\\". 
runtime. 

If multiple \-\-env options are specified then qsub will take the union.

e.g. qsub ... --env "A=B:C=x\\=1\\:y\\=2\\:z\\=3:D=ABC" ... --env "MY_NAME=cobalt" ...

A would equal B

C would equal x=1:y=2:z=3

D would equal ABC

and

MY_NAME would be equal to "cobalt"

.TP
.B \-\-jobname [job name] - (jobid expansion)
Sets Jobname. If this option is not provided then Jobname will be set to whatever -o option specified.'
.TP
.B \-\-geometry <geometry_spec>
Sets the geometry of the block that the jobs should run on.  This is in
the form of AxBxCxDxE.  This must be the geometry of the compute block.
This may not be a fraction of a block.
.TP
.B \-h \-\-held
Submit job and immediately place it in the user hold state
.TP
.B \-i \-\-inputfile [path to file]
Send file to job's stdin.
.TP
.B \-I \-\-interactive
Run an interactive command. During job execution, the current tty will
be connected with the running job.
To run interactive job you can use -I, --interactive or --mode interactive.
Running qsub in "interactive" mode will create a shell for the user while running
qsub.  If the user CTRL-D or performs an "exit" command from the shell then Cobalt
will terminate the "interactive" job.

.TP 
.B \-M \-\-notify [email address]
Send an email notification at the start and stop of the job to the
specified email address.
.TP
.B \-n \-\-nodecount [nodecount]
Specifies the node count for a job
.TP
.B \-o \-\-output [path to file] - (jobid expansion)
Send job stdout to file specified.
.TP
.B \-O \-\-outputprefix [output prefix] - (jobid expansion)
Use the specified prefix for both .output, .error and debuglog files. This will only take effect if \-o or \-e or \-\-debuglog not supplied. 
.TP
.B \-\-proccount [process count]
Specify the number of processes to start.
.TP
.B \-q \-\-queue [queue] 
Submit the job to the specified queue.
.TP
.B \-\-run_users \-\-user_list [<user1>:<user2>:...]
Sets a colon-separated list of users for the job being submitted.  All users
in this list will be able to execute cobalt commands to control the job. The 
submitting user is always able to run commands on a submitted job.
.TP
.B \-\-run_project
Appends the list of users in a project to the list of users authorized to run
commands on the submitted job. 
.TP
.B \-u \-\-umask
set umask: octal number default(022)
.TP
.B \-t \-\-time [wallclock time] 
Specify the runtime for a job. If the job runs over this limit, it will be 
killed. The time may be specified as eitehr an integer number of minutes or a 
colon-delimited value of the format: HH:MM:SS. Enter 0 to get the max allowed 
walltime.
.TP


.SH "BLUEGENE OPTIONS"
.TP 
The following commands are only valid on IBM BlueGene architecture platforms.
.TP
.B \-\-kernel [kernel profile]
Run the job with the specified kernel profile.
.TP
.B \-K \-\-kerneloptions [kernel options]
Run the job with the specified kernel options (equivalent to 
.Impirun -kernel_options 
on Blue Gene/L).
.TP
.B \-\-ion_kernel [kernel profile]
Run the job with the specified IO Node kernel profile. (BlueGene/Q only)
.TP
.B \-\-ion_kerneloptions [kernel options]
Run the job with the specified IO Node kernel options.  (BlueGene/Q only)
.TP
.B \-\-mode [mode]
This is a platform-dependent setting that controls the execution mode of the 
submitted job and the division of cores and memory on the compute nodes.
Valid values are dependent on the specific BlueGene platform:

.TP
BG/L:  Valid values are "co" (coprocessor),"vn" (virtual node) and "script".
The default is "co".

.TP
BG/P:  Valid values are "smp", "dual", "vn" and "script".   "smp", "dual" and
"vn" correspond to the modes within mpirun. The default is "smp".

.TP
BG/Q:  Valid values are "c1","c2","c4","c8","c16","c32","c64","script" and
"interactive".  The c(n) modes correspond to the "ranks-per-node" flag of
runjob and governs the MPI ranks started per node on the compute nodes.  Node
memory is divided evenly between all processes.  64/n threads will be available
to each MPI process as well. If this option is not set the default is "c1".

On all platforms, the "script" mode causes the job to be routed through the
script-forker, and will allow the execution of script jobs.  On linux cluster
platforms, all jobs are run as script jobs.

.SH "NOTE"
The only thing printed to STDOUT is the jobid, any other error or informational messages are printed to STDERR.
.SS "Cray Systems"
On Cray systems, the "location" attribute may be specified by a comma-delimited
list of node ids.  Runs of node ids may be compacted to a hyphenated, inclusive
pair, i.e. 1-4 would expand to 1, 2, 3, 4.  All nodes specified in location must
exist on the system.  This list format is compatible with the values returned by
Cray's
.BRcnselect (1)
command.
.SH "SEE ALSO"
.BR qstat (1),
.BR qdel (1),
.BR qhold (1),
.BR qrls (1),
.BR qalter (1),
.BR qmove (1),
.BR cqm (1),
.BR cqwait (1)
.SH "BUGS"
